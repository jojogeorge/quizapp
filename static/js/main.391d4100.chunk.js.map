{"version":3,"sources":["assets/img/hints.png","assets/sound/success.wav","assets/sound/error.wav","assets/sound/button-click.ogg","components/Home.js","components/quiz/QuizInstructions.js","components/quiz/Play.js","utils.js","components/quiz/QuizSummary.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","id","className","color","size","to","QuizInstructions","src","answer","alt","Play","startTimer","countDownTime","interval","setInterval","minutes","parseInt","seconds","clearInterval","setState","time","endGame","displayQuestions","questions","currentQuestion","nextQuestion","previousQuestion","value","currentQuestionIndex","state","undefined","Object","keys","length","trim","numberOfQuestions","previousRandomNumbers","usedFifty50","showOptions","handleOptionClick","e","target","innerHTML","toLowerCase","correctAnswer","wrongAnswer","handleNextButtonClick","prevState","handlePreviousButtonClick","handleQuitButtonClick","window","confirm","props","history","push","Array","from","document","querySelectorAll","forEach","option","index","style","visibility","handleButtonClick","buttonSound","current","play","console","log","correctSound","M","toast","html","classes","displayLength","score","correctAnswers","noOfansweredQuestion","navigator","vibrate","wrongSound","wrongAnswers","handleFifty50","fifty50","findIndexOfAnswer","indexOfAnswer","options","randomNumbers","count","randomNumber","Math","round","random","includes","handleHints","hints","concat","alert","playerStats","noOfQuestions","noOfWrongAnswers","noOfCorrectAnswers","fifty50Used","hintsUsed","setTimeout","React","createRef","this","ref","correctNotification","errorNotification","buttonClick","onClick","question","optionA","optionB","optionC","optionD","classnames","Component","QuizSummary","noOfAnswers","usedHints","location","floor","stats","remark","App","path","exact","component","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.391d4100.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hints.94c9db16.png\";","module.exports = __webpack_public_path__ + \"static/media/success.a70319b5.wav\";","module.exports = __webpack_public_path__ + \"static/media/error.8d6df0fb.wav\";","module.exports = __webpack_public_path__ + \"static/media/button-click.2ca6ffd1.ogg\";","import React,{ Fragment } from 'react';\r\nimport CubeOutlineIcon from 'mdi-react/CubeOutlineIcon';\r\nimport { Helmet } from 'react-helmet';\r\nimport  {Link} from 'react-router-dom';\r\n\r\n\r\nconst Home = () => (\r\n    <Fragment>\r\n        {/**<Helmet>\r\n            <title>Quiz</title>\r\n        </Helmet>*/}\r\n\r\n        <div id=\"home\">\r\n            <section>\r\n                <div className=\"cube\">\r\n                    <CubeOutlineIcon color=\"orange\" size={65}/>\r\n                </div>\r\n                <h1>Quiz App</h1>\r\n                <div className=\"play-button-container\">\r\n                    <ul>\r\n                        <li >\r\n                            <Link className=\"play-button\" to=\"/play/instructions\">Play</Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <div className=\"auth-container\">\r\n                    <Link className=\"auth-buttons\"  id=\"login-button\" to=\"/login\">Login</Link>\r\n                    <Link className=\"auth-buttons\" id=\"signup-button\" to=\"/register\">Register</Link>\r\n\r\n                </div>\r\n            </section>\r\n\r\n        </div>\r\n    </Fragment>\r\n        \r\n    \r\n);\r\n\r\nexport default Home;","import React , {Component, Fragment} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport LifePreserverIcon from 'mdi-react/LifePreserverIcon';\r\n\r\n\r\n\r\nimport answer from '../../assets/img/hints.png';\r\n\r\n\r\nconst QuizInstructions = () => (\r\n    <Fragment>\r\n        {/***\r\n         * <Helmet></Helmet>\r\n         */}\r\n\r\n         <div className=\"instructions container\">\r\n             <h1>\r\n                 How to Play Game\r\n             </h1>\r\n             <p> Ensure reading carefully</p>\r\n             <ul className=\"browser-default\" id=\"main-list\">\r\n                 <li>game rule1 </li>\r\n                 <li>game rule1 \r\n                     <LifePreserverIcon  className= \"lifeline\" color=\"green\" size={20}></LifePreserverIcon>\r\n                 </li>\r\n                 <li>\r\n                     game rule1\r\n\r\n                    <img src={answer} alt=\"answer hint\"/>\r\n                 </li>\r\n             </ul>\r\n             <div>\r\n                 <span className=\"left\"> <Link to=\"/\">Back</Link></span>\r\n                 <span className=\"right\"> <Link to=\"/play/quiz\">Lets Go</Link></span>\r\n             </div>\r\n         </div>\r\n    </Fragment>\r\n);\r\n\r\nexport default QuizInstructions;","import React, { Fragment } from 'react';\r\nimport M from 'materialize-css';\r\nimport classnames from 'classnames';\r\n\r\nimport LifePreserverIcon from 'mdi-react/LifePreserverIcon';\r\nimport BulbOutlineIcon from 'mdi-react/BulbOutlineIcon';\r\nimport ClockAlertIcon from 'mdi-react/ClockAlertIcon';\r\nimport ChevronRightIcon from 'mdi-react/ChevronRightIcon';\r\nimport ChevronLeftIcon from 'mdi-react/ChevronLeftIcon';\r\nimport CloseIcon from 'mdi-react/CloseIcon';\r\n\r\nimport questions from '../../questions.json';\r\nimport { isEmpty } from '../../utils';\r\n\r\n\r\nimport correctNotification from '../../assets/sound/success.wav';\r\nimport errorNotification from '../../assets/sound/error.wav';\r\nimport buttonClick from '../../assets/sound/button-click.ogg';\r\n\r\n\r\nclass Play extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            questions,\r\n            currentQuestion: {},\r\n            nextQuestion: {},\r\n            previousQuestion: {},\r\n            answer: '',\r\n            numberOfQuestions: 0,\r\n            noOfansweredQuestion: 0,\r\n            currentQuestionIndex: 0,\r\n            score: 0,\r\n            correctAnswers: 0,\r\n            wrongAnswers: 0,\r\n            hints: 5,\r\n            previousRandomNumbers:[],\r\n            fifty50: 2,\r\n            usedFifty50: false,\r\n            time: {}\r\n\r\n        };\r\n        this.interval = null;\r\n        this.correctSound = React.createRef();\r\n        this.wrongSound = React.createRef();\r\n        this.buttonSound = React.createRef();\r\n    }\r\n\r\n    startTimer = () => {\r\n        let countDownTime = 60*1;\r\n        this.interval = setInterval(() =>{\r\n\r\n           let minutes = parseInt(countDownTime/60,10);\r\n           let seconds = parseInt(countDownTime%60,10);\r\n\r\n           minutes = minutes < 10 ? '0'+ minutes:minutes;\r\n           seconds = seconds <10 ? '0'+ seconds: seconds; \r\n            if(--countDownTime < 0) {\r\n                clearInterval(this.interval);\r\n                this.setState({\r\n                    time: {\r\n                        minutes:0,\r\n                        seconds:0\r\n                    }\r\n                },() =>{\r\n                    this.endGame();\r\n                })\r\n            }else {\r\n                this.setState({\r\n                    time: {\r\n                        minutes:minutes,\r\n                        seconds:seconds\r\n                    }\r\n                })\r\n            }\r\n\r\n        },1000);\r\n    }\r\n    displayQuestions = (questions, currentQuestion, nextQuestion, previousQuestion) => {\r\n        let { currentQuestionIndex } = this.state;\r\n        if (!isEmpty(this.state.questions)) {\r\n            questions = this.state.questions;\r\n            currentQuestion = questions[currentQuestionIndex];\r\n            nextQuestion = questions[currentQuestionIndex + 1];\r\n            previousQuestion = questions[currentQuestionIndex - 1];\r\n            const answer = currentQuestion.answer;\r\n\r\n            this.setState({\r\n                currentQuestion,\r\n                nextQuestion,\r\n                previousQuestion,\r\n                numberOfQuestions: questions.length,\r\n                answer,\r\n                previousRandomNumbers: [],\r\n                usedFifty50: false\r\n            },() =>{\r\n                this.showOptions();\r\n            });\r\n        }\r\n\r\n    };\r\n\r\n    componentDidMount() {\r\n        const { questions, currentQuestion, nextQuestion, previousQuestion } = this.state;\r\n        this.displayQuestions(questions, currentQuestion, nextQuestion, previousQuestion);\r\n        //this.startTimer();\r\n    }\r\n\r\n    handleOptionClick = (e) => {\r\n        if (e.target.innerHTML.trim().toLowerCase() === this.state.answer.toLowerCase()) {\r\n            this.correctAnswer();\r\n        } else {\r\n            this.wrongAnswer();\r\n        }\r\n    }\r\n\r\n    handleNextButtonClick = () => {\r\n        if (this.state.nextQuestion !== undefined) {\r\n            this.setState(prevState => ({\r\n                currentQuestionIndex: prevState.currentQuestionIndex + 1\r\n\r\n            }), () => {\r\n                this.displayQuestions(this.state.questions, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    handlePreviousButtonClick = () => {\r\n        if (this.state.previousQuestion !== undefined) {\r\n            this.setState(prevState => ({\r\n                currentQuestionIndex: prevState.currentQuestionIndex - 1\r\n\r\n            }), () => {\r\n                this.displayQuestions(this.state.questions, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    handleQuitButtonClick = () => {\r\n        if (window.confirm('Are you sure to quit the quiz?')) {\r\n            this.props.history.push('/');\r\n        }\r\n    } \r\n    showOptions =() =>{\r\n        const options = Array.from(document.querySelectorAll('.option'));\r\n            options.forEach((option, index)=>{\r\n            option.style.visibility = 'visible';\r\n        });\r\n    }\r\n\r\n    handleButtonClick = (e) => {\r\n        this.buttonSound.current.play();\r\n        console.log(e.target.id)\r\n        switch (e.target.id) {\r\n            case 'next-button':\r\n                this.handleNextButtonClick();\r\n                break;\r\n            case 'previous-button':\r\n                this.handlePreviousButtonClick();\r\n                break;\r\n            case 'quit-button':\r\n                this.handleQuitButtonClick();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n\r\n    };\r\n\r\n    correctAnswer = () => {\r\n        this.correctSound.current.play();\r\n        M.toast({\r\n            html: 'Correct Answer',\r\n            classes: 'toast-valid',\r\n            displayLength: 1500\r\n        });\r\n        this.setState(prevState => ({\r\n            score: prevState.score + 1,\r\n            correctAnswers: prevState.correctAnswers + 1,\r\n            currentQuestionIndex: prevState.currentQuestionIndex + 1,\r\n            noOfansweredQuestion: prevState.noOfansweredQuestion + 1\r\n        }), () => {\r\n            if(!this.state.nextQuestion) {\r\n                this.endGame();\r\n            } else {\r\n                this.displayQuestions(this.state.questions, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\r\n            }\r\n        });\r\n    };\r\n\r\n    wrongAnswer = () => {\r\n        navigator.vibrate(1000);\r\n        this.wrongSound.current.play();\r\n        M.toast({\r\n            html: 'Wrong Answer',\r\n            classes: 'toast-invalid',\r\n            displayLength: 1500\r\n        });\r\n        this.setState(prevState => ({\r\n\r\n            wrongAnswers: prevState.wrongAnswers + 1,\r\n            currentQuestionIndex: prevState.currentQuestionIndex + 1,\r\n            noOfansweredQuestion: prevState.noOfansweredQuestion + 1\r\n        }), () => {\r\n            if(!this.state.nextQuestion) {\r\n                this.endGame();\r\n            } else {\r\n                this.displayQuestions(this.state.questions, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\r\n            }\r\n        });\r\n    }\r\n\r\n    handleFifty50 = () =>{\r\n        if(this.state.fifty50 > 0 && !this.state.usedFifty50) {\r\n            let {indexOfAnswer, options} = this.findIndexOfAnswer();\r\n            let randomNumbers =[];\r\n            let count = 0;\r\n            do {\r\n                let randomNumber = Math.round(Math.random() *3);\r\n                if(randomNumber !== indexOfAnswer) {\r\n                    if (randomNumbers.length<2 && !randomNumbers.includes(randomNumber) && !randomNumbers.includes(indexOfAnswer)){\r\n                        randomNumbers.push(randomNumber);\r\n                        count++;\r\n                    }\r\n            }\r\n            } while(count<2);\r\n\r\n            options.forEach((option, index) => {\r\n                if(randomNumbers.includes(index)) {\r\n                    option.style.visibility = 'hidden';\r\n                } \r\n            },this.setState(prevState =>({\r\n                fifty50: prevState.fifty50 - 1,\r\n                usedFifty50: true\r\n            })));\r\n\r\n        }\r\n    }\r\n    findIndexOfAnswer = () =>{\r\n        const options = Array.from(document.querySelectorAll('.option'));\r\n        let indexOfAnswer;\r\n        options.forEach((option, index)=>{\r\n            if(option.innerHTML.trim().toLowerCase() === this.state.answer.toLowerCase()) {\r\n                indexOfAnswer = index;\r\n            }\r\n        });\r\n        return {indexOfAnswer, options};\r\n    }\r\n    handleHints = () =>{\r\n        if(this.state.hints<1)\r\n            return;\r\n        let {indexOfAnswer, options} = this.findIndexOfAnswer();\r\n\r\n        //hiding random wrong option\r\n        while(true) {\r\n            const randomNumber = Math.round(Math.random() *3);\r\n            if(randomNumber !== indexOfAnswer && !this.state.previousRandomNumbers.includes(randomNumber)) {\r\n                options.forEach((option, index) => {\r\n                    if(index === randomNumber) {\r\n                        option.style.visibility = 'hidden';\r\n                        \r\n                        this.setState(prevState =>({\r\n                            hints: prevState.hints - 1,\r\n                            previousRandomNumbers: prevState.previousRandomNumbers.concat(randomNumber)\r\n                        }))\r\n                    }\r\n                    \r\n                });\r\n                break;\r\n            }\r\n            if(this.state.previousRandomNumbers.length >= 3) {\r\n                break;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    endGame = () =>{\r\n        alert(\"Quiz has been ended\");\r\n        const {state} = this;\r\n        const playerStats ={\r\n            score: state.score,\r\n            noOfQuestions: state.numberOfQuestions,\r\n            noOfansweredQuestion: state.noOfansweredQuestion,\r\n            noOfWrongAnswers: state.wrongAnswers,\r\n            noOfCorrectAnswers: state.correctAnswers,\r\n            fifty50Used: 2- state.fifty50,\r\n            hintsUsed: 5 - state.hints\r\n        }\r\n\r\n        setTimeout(() =>{\r\n            this.props.history.push('/play/summary',playerStats);\r\n        },1000);\r\n    }\r\n\r\n    render() {\r\n        const { currentQuestion, currentQuestionIndex,\r\n             numberOfQuestions, hints, fifty50,time,\r\n            previousQuestion } = this.state;\r\n\r\n        return (\r\n            <Fragment>\r\n                <Fragment>\r\n                    <audio ref={this.correctSound} src={correctNotification}></audio>\r\n                    <audio ref={this.wrongSound} src={errorNotification}></audio>\r\n                    <audio ref={this.buttonSound} src={buttonClick}></audio>\r\n\r\n                </Fragment>\r\n                <div className=\"questions\">\r\n                    <h2>Quiz Mode</h2>\r\n                    <div className=\"lifeline-container\">\r\n        <p><LifePreserverIcon  size={18} onClick={this.handleFifty50} className=\"lifeline-icon\"></LifePreserverIcon><span className=\"lifeline\">{fifty50}</span></p>\r\n                        <p><BulbOutlineIcon  size={18} onClick={this.handleHints} className=\"lifeline-icon\"></BulbOutlineIcon><span className=\"lifeline\">{hints}</span></p>\r\n                    </div>\r\n                    <div>\r\n                        <p>\r\n                            <span className=\"left lifeline\">{currentQuestionIndex + 1} of {numberOfQuestions}</span>\r\n                            <span className=\"right lifeline\">{time.minutes}:{time.seconds}<ClockAlertIcon color=\"green\" size={18}></ClockAlertIcon></span>\r\n                        </p>\r\n\r\n                    </div>\r\n                    <h5>{currentQuestion.question} </h5>\r\n                    <div className=\"options-container\">\r\n                        <p onClick={this.handleOptionClick} className=\"option\"> {currentQuestion.optionA}</p>\r\n                        <p onClick={this.handleOptionClick} className=\"option\"> {currentQuestion.optionB}</p>\r\n                    </div>\r\n                    <div className=\"options-container\">\r\n                        <p onClick={this.handleOptionClick} className=\"option\"> {currentQuestion.optionC}</p>\r\n                        <p onClick={this.handleOptionClick} className=\"option\"> {currentQuestion.optionD}</p>\r\n\r\n                    </div>                   \r\n                     \r\n                </div>\r\n                <section>\r\n                    <div className=\"button-container\">\r\n                            <button\r\n                                id=\"previous-button\"\r\n                                className={classnames('', { 'disable': !previousQuestion })}\r\n                                onClick={this.handleButtonClick}\r\n                            >  <ChevronLeftIcon className=\"button-icon\" size=\"18\"></ChevronLeftIcon>\r\n                                 Previous\r\n                            </button>\r\n                            <button\r\n                                id=\"next-button\"\r\n                                className={classnames('', { 'disable': currentQuestionIndex+1 === questions.length })}\r\n                                onClick={this.handleButtonClick}\r\n                            > Next <ChevronRightIcon className=\"button-icon\" size=\"18\"></ChevronRightIcon>\r\n                            </button>\r\n                            <button id=\"quit-button\" onClick={this.handleButtonClick}> Quit\r\n                            <CloseIcon className=\"button-icon\" size=\"18\"></CloseIcon></button>\r\n                        </div>\r\n                </section>\r\n                \r\n            </Fragment>\r\n\r\n        );\r\n    }\r\n};\r\nexport default Play;","const isEmpty = (value) => \r\nvalue ===undefined ||\r\nvalue === null ||\r\n(typeof value === 'object' && Object.keys(value).length === 0) ||\r\n(typeof value === 'string' && value.trim().length === 0)\r\n\r\nexport {isEmpty};","import React,{Component, Fragment} from 'react';\r\nimport CheckCircleOutlineIcon from 'mdi-react/CheckCircleOutlineIcon';\r\nimport  {Link} from 'react-router-dom';\r\nclass QuizSummary extends Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            score:0,\r\n            noOfQuestions:0,\r\n            noOfAnswers:0,\r\n            correctAnswers:0,\r\n            wrongAnswers:0,\r\n            usedHints:0,\r\n            usedFifty50:0\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n         const {state} = this.props.location;\r\n        if(state ){\r\n            this.setState({\r\n                score:Math.floor((state.noOfCorrectAnswers/state.noOfansweredQuestion)*100),\r\n                noOfQuestions:state.noOfQuestions,\r\n                noOfAnswers:(state.noOfCorrectAnswers + state.noOfWrongAnswers),\r\n                correctAnswers:state.noOfCorrectAnswers,\r\n                wrongAnswers:state.noOfWrongAnswers,\r\n                usedHints:state.hintsUsed,\r\n                usedFifty50:state.fifty50Used\r\n            })\r\n        }        \r\n    }\r\n    render() {\r\n        const {score, noOfQuestions,noOfAnswers,correctAnswers,usedFifty50,wrongAnswers,usedHints} = this.state;\r\n\r\n        let stats, remark;\r\n        remark = score<=30?\"Need Practice\":(score>30 && score<=60)?'Better Luck next time':'Congratulations';\r\n        console.log(this.state)\r\n        if(this.props.location.state) {\r\n            stats =(\r\n            <Fragment>\r\n                \r\n                <div className=\"container\">\r\n                    <h4>{remark}</h4>\r\n                    <h2>Your Score: {score+'%'} </h2>\r\n                    <div className=\"scorecard\">\r\n                        <span className=\"stat left\">No of Questions:</span>\r\n                        <span className=\"stat right\">{noOfQuestions}</span><br/>\r\n                        <span className=\"stat left\">No of attended Questions:</span>\r\n                        <span className=\"stat right\">{noOfAnswers}</span><br/>\r\n                        <span className=\"stat left\">Correct Answers:</span>\r\n                        <span className=\"stat right\">{correctAnswers}</span><br/>\r\n                        <span className=\"stat left\">Wrong Answers:</span>\r\n                        <span className=\"stat right\">{wrongAnswers}</span><br/>\r\n                        <span className=\"stat left\">No of Hints used:</span>\r\n                        <span className=\"stat right\">{usedHints}</span><br/>\r\n                        <span className=\"stat left\">No of Fitfy50 used:</span>\r\n                        <span className=\"stat right\">{usedFifty50}</span><br/>\r\n                    </div>\r\n                    \r\n\r\n                    \r\n                </div>\r\n            </Fragment>\r\n            \r\n            );\r\n        }else {\r\n            stats =(<h1>No Stats Available!</h1>);\r\n        }\r\n        \r\n        return (\r\n            <Fragment>\r\n                <div className=\"quiz-end-div\">\r\n                    <CheckCircleOutlineIcon color=\"green\" size=\"50\"></CheckCircleOutlineIcon>\r\n                \r\n                    <h4>Quiz has ended</h4>\r\n                </div>\r\n\r\n                <div className=\"stats\">\r\n                    {stats}\r\n                </div>\r\n                \r\n                <section className=\"summary-button-container\">\r\n                    <ul>\r\n                        <li>\r\n                            <Link to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/play/quiz\">Play Again</Link>\r\n                        </li>\r\n                    </ul>\r\n                </section>\r\n            </Fragment>\r\n        );\r\n    }\r\n} \r\nexport default QuizSummary;","import React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport Home from './components/Home';\nimport QuizInstructions from './components/quiz/QuizInstructions';\nimport Play from './components/quiz/Play';\nimport QuizSummary from './components/quiz/QuizSummary';\n\nfunction App() {\n  return (\n    <Router>\n      <Route path=\"/\" exact component={Home}/>\n      <Route path=\"/play/instructions\" exact component={QuizInstructions}/>\n      <Route path=\"/play/quiz\" exact component={Play}/>\n      <Route path=\"/play/summary\" exact component={QuizSummary}/>\n    </Router>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'materialize-css/dist/css/materialize.min.css';\nimport './styles/styles.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}